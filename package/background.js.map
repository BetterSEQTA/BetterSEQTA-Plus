{"version":3,"file":"background.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://betterseqtaplus/webpack/bootstrap","webpack://betterseqtaplus/webpack/runtime/define property getters","webpack://betterseqtaplus/webpack/runtime/hasOwnProperty shorthand","webpack://betterseqtaplus/webpack/runtime/make namespace object","webpack://betterseqtaplus/./src/background.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*global chrome*/\nexport const openDB = () => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('MyDatabase', 1);\n\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      db.createObjectStore('backgrounds', { keyPath: 'id' });\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n\n    request.onerror = (event) => {\n      reject('Error opening database: ' + event.target.errorCode);\n    };\n  });\n};\n\nexport const writeData = async (type, data) => {\n  const db = await openDB();\n\n  const tx = db.transaction('backgrounds', 'readwrite');\n  const store = tx.objectStore('backgrounds');\n  const request = await store.put({ id: 'customBackground', type, data });\n\n  return request.result;\n};\n\nexport const readData = () => {\n  return new Promise((resolve, reject) => {\n    openDB()\n      .then(db => {\n        const tx = db.transaction('backgrounds', 'readonly');\n        const store = tx.objectStore('backgrounds');\n\n        // Retrieve the custom background\n        const getRequest = store.get('customBackground');\n\n        // Attach success and error event handlers\n        getRequest.onsuccess = function(event) {\n          resolve(event.target.result);\n        };\n\n        getRequest.onerror = function(event) {\n          console.error('An error occurred:', event);\n          reject(event);\n        };\n      })\n      .catch(error => {\n        console.error('An error occurred:', error);\n        reject(error);\n      });\n  });\n};\n\nfunction reloadSeqtaPages() {\n  chrome.tabs.query({}, function (tabs) {\n    for (let tab of tabs) {\n      if (tab.title.includes('SEQTA Learn')) {\n        chrome.tabs.reload(tab.id);\n      }\n    }\n  });\n}\n\n// Helper function to handle setting permissions\nconst handleAddPermissions = () => {\n  if (typeof chrome.declarativeContent !== 'undefined') {\n    chrome.declarativeContent.onPageChanged.removeRules(undefined, () => {});\n  }\n  \n  chrome.permissions.request(\n    { permissions: ['declarativeContent'], origins: ['*://*/*'] },\n    (granted) => {\n      if (granted) {\n        const rules = [\n          // Define your rules here\n        ];\n        \n        rules.forEach(rule => {\n          chrome.declarativeContent.onPageChanged.addRules([rule]);\n        });\n        \n        alert('Permissions granted. Reload SEQTA pages to see changes. If this workaround doesn\\'t work, please contact the developer. It will be an easy fix');\n      }\n    }\n  );\n};\n\n// Main message listener\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  switch (request.type) {\n  case 'reloadTabs':\n    reloadSeqtaPages();\n    break;\n  \n  case 'currentTab':\n    chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n      chrome.tabs.sendMessage(tabs[0].id, request, function (response) {\n        sendResponse(response);\n      });\n    });\n    return true;\n  \n  case 'githubTab':\n    chrome.tabs.create({ url: 'github.com/SethBurkart123/EvenBetterSEQTA' });\n    break;\n    \n  case 'setDefaultStorage':\n    SetStorageValue(DefaultValues);\n    break;\n    \n  case 'addPermissions':\n    handleAddPermissions();\n    break;\n\n  case 'sendNews':\n    GetNews(sendResponse);\n    return true;\n      \n  default:\n    console.log('Unknown request type');\n  }\n});\n\nfunction GetNews(sendResponse) {\n  // Gets the current date\n  const date = new Date();\n\n  const from =\n    date.getFullYear() +\n    '-' +\n    (date.getMonth() + 1) +\n    '-' +\n    (date.getDate() - 1);\n\n  let url = `https://newsapi.org/v2/everything?domains=abc.net.au&from=${from}&apiKey=17c0da766ba347c89d094449504e3080`;\n\n  fetch(url)\n    .then((result) => result.json())\n    .then((response) => {\n      if (response.code == 'rateLimited') {\n        url += '%00';\n        GetNews();\n      } else {\n        sendResponse({ news: response });\n      }\n    });\n}\n\nconst DefaultValues = {\n  onoff: true,\n  animatedbk: true,\n  bksliderinput: 50,\n  transparencyEffects: false,\n  lessonalert: true,\n  notificationcollector: true,\n  defaultmenuorder: [],\n  menuitems: {},\n  menuorder: [],\n  subjectfilters: {},\n  selectedColor: 'linear-gradient(40deg, rgba(201,61,0,1) 0%, RGBA(170, 5, 58, 1) 100%)',\n  DarkMode: true,\n  shortcuts: [\n    {\n      name: 'YouTube',\n      enabled: false,\n    },\n    {\n      name: 'Outlook',\n      enabled: true,\n    },\n    {\n      name: 'Office',\n      enabled: true,\n    },\n    {\n      name: 'Spotify',\n      enabled: false,\n    },\n    {\n      name: 'Google',\n      enabled: true,\n    },\n    {\n      name: 'DuckDuckGo',\n      enabled: false,\n    },\n    {\n      name: 'Cool Math Games',\n      enabled: false,\n    },\n    {\n      name: 'SACE',\n      enabled: false,\n    },\n    {\n      name: 'Google Scholar',\n      enabled: false,\n    },\n    {\n      name: 'Gmail',\n      enabled: false,\n    },\n    {\n      name: 'Netflix',\n      enabled: false,\n    },\n    {\n      name: 'Education Perfect',\n      enabled: false,\n    },\n  ],\n  customshortcuts: [],\n};\n\nfunction SetStorageValue(object) {\n  for (var i in object) {\n    chrome.storage.local.set({ [i]: object[i] });\n  }\n}\n\nfunction UpdateCurrentValues() {\n  chrome.storage.local.get(null, function (items) {\n    var CurrentValues = items;\n\n    const NewValue = Object.assign({}, DefaultValues, CurrentValues);\n\n    function CheckInnerElement(element) {\n      for (let i in element) {\n        if (typeof element[i] === 'object') {\n          if (typeof DefaultValues[i].length == 'undefined') {\n            NewValue[i] = Object.assign({}, DefaultValues[i], CurrentValues[i]);\n          } else {\n            // If the object is an array, turn it back after\n            let length = DefaultValues[i].length;\n            NewValue[i] = Object.assign({}, DefaultValues[i], CurrentValues[i]);\n            let NewArray = [];\n            for (let j = 0; j < length; j++) {\n              NewArray.push(NewValue[i][j]);\n            }\n            NewValue[i] = NewArray;\n          }\n        }\n      }\n    }\n    CheckInnerElement(DefaultValues);\n\n    if (items['customshortcuts']) {\n      NewValue['customshortcuts'] = items['customshortcuts'];\n    }\n\n    SetStorageValue(NewValue);\n  });\n}\n\nfunction migrateOldStorage() {\n  chrome.storage.local.get(null, function (items) {\n    let shouldUpdate = false; // Flag to check if there is anything to update\n    \n    // Check for the old \"Name\" field and convert it to \"name\"\n    if (items.shortcuts && items.shortcuts.length > 0 && 'Name' in items.shortcuts[0]) {\n      shouldUpdate = true;\n      items.shortcuts = items.shortcuts.map((shortcut) => {\n        return {\n          name: shortcut.Name,  // Convert \"Name\" to \"name\"\n          enabled: shortcut.enabled // Keep the \"enabled\" field as is\n        };\n      });\n    }\n\n    // Check for \"educationperfect\" and convert it to \"Education Perfect\"\n    if (items.shortcuts && items.shortcuts.length > 0) {\n      for (let shortcut of items.shortcuts) {\n        if (shortcut.name === 'educationperfect' || shortcut.name === 'Education Perfect') {\n          shouldUpdate = true;\n          shortcut.name = 'Education Perfect';\n        }\n      }\n    }\n\n    // If there\"s something to update, set the new values in storage\n    if (shouldUpdate) {\n      chrome.storage.local.set({ shortcuts: items.shortcuts }, function() {\n        console.log('Migration completed.');\n      });\n    }\n  });\n}\n\nchrome.runtime.onInstalled.addListener(function (event) {\n  chrome.storage.local.remove(['justupdated']);\n  UpdateCurrentValues();\n  if ( event.reason == 'install', event.reason == 'update' ) {\n    chrome.storage.local.set({ justupdated: true });\n    migrateOldStorage();\n  }\n});"],"names":[],"sourceRoot":""}